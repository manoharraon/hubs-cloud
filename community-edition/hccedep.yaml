apiVersion: v1
kind: Namespace
metadata:
  name: "hubs"
  annotations:
    domain: "testdomain.com"
    adm: "testemail@gmail.com"    
---
########################################################################
###################### configs #########################################
########################################################################  
apiVersion: v1
kind: Secret
metadata:
  name: configs
  namespace: "hubs"
stringData:
  NODE_COOKIE: ""
  HUB_DOMAIN: "testdomain.com"
  DB_USER: "postgres"
  DB_PASS: "123456"
  DB_NAME: "retdb"
  DB_HOST: "pgbouncer"
  DB_HOST_T: "pgbouncer-t"
  SMTP_SERVER: "smtp.gmail.com"
  SMTP_PORT: "587"
  SMTP_USER: "testemail@gmail.com"
  SMTP_PASS: "*"
  ADM_EMAIL: "testemail@gmail.com"
  PGRST_DB_URI: "postgres://postgres:123456@pgbouncer/retdb"
  GUARDIAN_KEY: "*"
  PHX_KEY: "*"
  SKETCHFAB_API_KEY: "?"
  TENOR_API_KEY: "?"
  PSQL: "postgres://postgres:123456@pgbouncer/retdb"
  PERMS_KEY: '-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDKKdXJtI1O6Ivv\\nINOv5Z/VStWeQ5umqHFI0Jue28ygZ9dyVA5CLcZP2OzLEDWnImsD7xmJ8/RdCkYV\\nBkhHkUx+a8oAkZzm/OuULNFYOvFlgndqWHrqZX1iDROnlfa4/lGAG8bRWatWml0b\\n8u5qTLK8KGjE13ZIJHhQ7aF8vPGL2O0g6TlQkeAecCO+FsMeyqn/mutAdJ3UBK1E\\nFa6H+BsP6nsR9OjkQlH5eB6yGSm992uzk3bv/Vs+1d7VKqmllLOVH1+FaGKwDdH9\\neKhqNbUePTeOhBw6IHWzArcvmY7mSkUdFeZ1g/lEtccmflf4x9c3enJD3fPXxZyS\\nywAhqWwxAgMBAAECggEAIC4qS1TTx5NJ2cidGcX7ZtLmOoP4OL5du2GwMUiQrpnz\\nrXhxhURPFIfAeGR9/eWt05mnCZLNO6rhKViaKdZDBGljutUdp5aWvhFSSPFSWr5l\\nWYbNw2u2BTp1U1Bno96hGjuRruJ6B9ZDlamFHQ5Uxzxxd5/1QppCPV5OPee/qsBr\\n2S0nFdlqO1ODtK5YqU9zwMYJ+8HWsw0x9HxKSwnCWX/qOhJE1l+BQzj/o/tgZmv5\\nTViQOUVcjCTq055I5wSm792dllXHp3lryEQFCqTdPSQnEVllKuru/RUIdUydW6UF\\nFVic2BCKI2wswg+hrCM/+YtUl1tYoG7s6QuwuCeIhwKBgQDdST3qJeW9cA3eKet6\\nJowB/WVWVZ3unjPG4fOl66DePOB8HMXbQhRYFH397bVrbOoSH1meyPdsCZIHEqNv\\nE/czQ279iapJGrogQSob8U9VNIPlWuo3zagtkwPYkP2ZX+Jlyu8eLYVv8SIH+nie\\nak6vz593FuRTgs8HzElQZy8AFwKBgQDp4KJdyb/maQ7Q+YDsbGIdQcBQP6OggnnS\\nR/OT4GIl7UDEP1NsSoUum5wf6rtuE9M8I+AOhx8ui1mzNRq9PPxC9jZye7ktCn0l\\nvtjxodzaJN7uUESspmnMLPff9xWkdvkxlJ68IDCkHchx6Wquxu+52JURpSmw/c5M\\noUo8r+Ia9wKBgQCHboIUQil/bYsvQ1y5H8pklV9mHXRRTEXIHRXvoGyOV5fUng+C\\nB8lHtxL9THTSUJBZkxJYmgrD9n+HEKMyIngSydyuE4lCwLbVcsyA2YmCTmfDAYeD\\nq7yYV/fsnaB4NDTts+vw/k9CmcQIOgWEfu+1rk6cpkgLzG1FCoR8Twp29QKBgG7B\\njqLTtCktf3K/daqA+UXZqXVXbenJYF+Q620QSeqkHJPTWXJjKAcWci07QF+0y8gj\\nRSwcGUw1edlAQNV1WBFuAALfTKZj3ThO1PY5LRmxdFFvedY5SMkEUq6hmII2RXSR\\naUq2A9L0t8QaQgda9pQQWSfuC3xh9ZyclUeAE5epAoGBAMMloPmtOl0mQY59EFTP\\n5dCkSJPraNMlCiiCMgXRyXXyJk1ogF0guR0lTsAYTeT19V5uoB5DnjmCMs17BKPs\\natSuSCB58VFfGgN5GFUyz8uwskwe0meUG0ARGdzj7q3Sq7mUYxxre+11Hp0Y2oJL\\n0eDWqcOSsG2tS/wpiFeBZQdU\\n-----END PRIVATE KEY-----\\n'
  PGRST_JWT_SECRET: '{"kty":"RSA","n":"yinVybSNTuiL7yDTr-Wf1UrVnkObpqhxSNCbntvMoGfXclQOQi3GT9jsyxA1pyJrA-8ZifP0XQpGFQZIR5FMfmvKAJGc5vzrlCzRWDrxZYJ3alh66mV9Yg0Tp5X2uP5RgBvG0VmrVppdG_LuakyyvChoxNd2SCR4UO2hfLzxi9jtIOk5UJHgHnAjvhbDHsqp_5rrQHSd1AStRBWuh_gbD-p7EfTo5EJR-Xgeshkpvfdrs5N27_1bPtXe1SqppZSzlR9fhWhisA3R_XioajW1Hj03joQcOiB1swK3L5mO5kpFHRXmdYP5RLXHJn5X-MfXN3pyQ93z18WckssAIalsMQ","e":"AQAB"}'
---
######################################################################################
###################################### ingress #######################################
######################################################################################
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ret
  namespace: hubs
  annotations:
    kubernetes.io/ingress.class: haproxy
    haproxy.org/response-set-header: |
      access-control-allow-origin "https://testdomain.com"
    haproxy.org/path-rewrite: /api-internal(.*) /_drop_
    metallb.universe.tf/allow-shared-ip: "true"
spec:
  tls:
  - hosts:
      - testdomain.com
    secretName: cert-testdomain.com
  - hosts:
      - assets.testdomain.com
    secretName: cert-assets.testdomain.com
  - hosts:
      - stream.testdomain.com
    secretName: cert-stream.testdomain.com
  - hosts:
      - cors.testdomain.com
    secretName: cert-cors.testdomain.com
  rules:
  - host: testdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ret
            port: 
              number: 4001
  - host: assets.testdomain.com
    http:
      paths:
      - path: /files/
        pathType: Prefix
        backend:
          service:
            name: ret
            port: 
              number: 4001
      - path: /http
        pathType: ImplementationSpecific  # haproxy's "Begin with"
        backend:
          service:
            name: ret
            port: 
              number: 4001
      - path: /hubs
        pathType: Prefix
        backend:
          service:
            name: hubs
            port: 
              number: 8080
      - path: /spoke
        pathType: Prefix
        backend:
          service:
            name: spoke
            port: 
              number: 8080
  - host: cors.testdomain.com
    http:
      paths:
      - path: /files/
        pathType: Prefix
        backend:
          service:
            name: ret
            port: 
              number: 4001
      - path: /http
        pathType: ImplementationSpecific
        backend:
          service:
            name: ret
            port: 
              number: 4001
      - path: /hubs
        pathType: Prefix
        backend:
          service:
            name: hubs
            port: 
              number: 8080
      - path: /spoke
        pathType: Prefix
        backend:
          service:
            name: spoke
            port: 
              number: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dialog
  namespace: hubs
  annotations:
    kubernetes.io/ingress.class: haproxy
    haproxy.org/server-ssl: "true"
    haproxy.org/load-balance: "url_param roomId"
    # metallb.universe.tf/address-pool: red-pool
    # metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  tls:
  - hosts:
      - stream.testdomain.com
    secretName: cert-stream.testdomain.com
  rules:
  - host: stream.testdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dialog
            port: 
              number: 4443
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nearspark
  namespace: hubs
  annotations:
    kubernetes.io/ingress.class: haproxy
    haproxy.ingress.kubernetes.io/rewrite-target: /$1
    metallb.universe.tf/allow-shared-ip: "true"
spec:
  tls:
  - hosts:
      - cors.testdomain.com
    secretName: cert-cors.testdomain.com
  rules:
  - host: cors.testdomain.com
    http:
      paths:
      - path: /nearspark(/|$)(.*)
        pathType: Prefix
        backend:
          service:
            name: nearspark
            port: 
              number: 5000
---
##############################################################################################
############################################ reticulum #######################################
##############################################################################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: ret-config
  namespace: hubs
data:
  config.toml.template: |
    [peerage]
    dns_name = "ret.<POD_NS>.svc.cluster.local"
    app_name = "ret"

    [ret."Elixir.Ret"]
    pool = "hubs"

    [ret."Elixir.RetWeb.Plugs.DashboardHeaderAuthorization"]
    dashboard_access_key = "<DASHBOARD_ACCESS_KEY>"

    [ret."Elixir.Ret.DiscordClient"]
    client_id = ""
    client_secret = ""
    bot_token = ""

    [ret."Elixir.RetWeb.Endpoint".https]
    port = 4000
    certfile = "/ret/cert.pem"
    cacertfile = "/ret/cacert.pem"
    keyfile = "/ret/key.pem"

    [ret."Elixir.RetWeb.Endpoint"]
    allowed_origins = "*"
    secret_key_base = "<PHX_KEY>"
    allow_crawlers = true

    [ret."Elixir.RetWeb.Endpoint".secondary_url]

    [ret."Elixir.RetWeb.Endpoint".cors_proxy_url]
    host = "cors.<HUB_DOMAIN>"
    port = 443

    [ret."Elixir.RetWeb.Endpoint".imgproxy_url]
    host = "<IMG_PROXY>"
    port = 5000

    [ret."Elixir.RetWeb.Endpoint".assets_url]
    host = "assets.<DOMAIN>"
    port = 443

    [ret."Elixir.RetWeb.Endpoint".link_url]
    host = "hubs-link.local"

    [ret."Elixir.RetWeb.Endpoint".url]
    host = "<HUB_DOMAIN>"
    port = 443

    [ret."Elixir.RetWeb.Endpoint".static_url]
    host = "<HUB_DOMAIN>"

    [ret."Elixir.Ret.Repo"]
    username = "<DB_USER>"
    password = "<DB_PASS>"
    database = "<DB_NAME>"
    hostname = "<DB_HOST_T>"
    template = "template0"
    pool_size = 10
    port = 5432

    [ret."Elixir.Ret.SessionLockRepo"]
    username = "<DB_USER>"
    password = "<DB_PASS>"
    database = "<DB_NAME>"
    hostname = "<DB_HOST>"
    template = "template0"

    port = 5432

    [ret."Elixir.Ret.Locking".session_lock_db]
    username = "<DB_USER>"
    password = "<DB_PASS>"
    database = "<DB_NAME>"
    hostname = "<DB_HOST>"
    port = 5432

    [ret."Elixir.Ret.Habitat"]
    ip = "127.0.0.1"
    http_port = 9631

    [ret."Elixir.Ret.JanusLoadStatus"]
    default_janus_host = "stream.<DOMAIN>"
    janus_service_name = ""
    janus_admin_secret = ""
    janus_admin_port = 7000
    janus_port = 4443

    [ret."Elixir.Ret.Guardian"]
    secret_key = "<GUARDIAN_KEY>"
    issuer = "<HUB_DOMAIN>"

    [ret."Elixir.Ret.PermsToken"]
    perms_key = "<PERMS_KEY>"

    [ret."Elixir.Ret.OAuthToken"]
    oauth_token_key = ""

    [ret]
    bot_access_key = ""
    # pgrest_host = ""
    # ita_host = ""

    [ret."Elixir.Ret.MediaResolver"]
    ytdl_host = "<YTDL_HOST>"
    photomnemonic_endpoint = "<PHOTOMNEMONIC>"
    sketchfab_api_key = "<SKETCHFAB_API_KEY>"
    tenor_api_key = "<TENOR_API_KEY>"

    [ret."Elixir.Ret.Speelycaptor"]
    speelycaptor_endpoint = "<SPEELYCAPTOR>"

    [ret."Elixir.Ret.PageOriginWarmer"]
    hubs_page_origin = "https://hubs.<POD_NS>:8080/hubs/pages"
    spoke_page_origin = "https://spoke.<POD_NS>:8080/spoke/pages"
    admin_page_origin = "https://hubs.<POD_NS>:8080/hubs/pages"
    insecure_ssl = true

    [ret."Elixir.Ret.HttpUtils"]
    insecure_ssl = true

    [ret."Elixir.Ret.Storage"]
    storage_path = "/storage"
    ttl = 172800
    host = "https://<HUB_DOMAIN>"
    quota_gb = "<STORAGE_QUOTA_GB>" # example: "12"
    # ^^^ has to be string or elixir throws (ArgumentError) argument error:erlang.byte_size(#), but why

    [ret."Elixir.RetWeb.Email"]
    from = "noreply@<HUB_DOMAIN>"

    [ret."Elixir.Ret.Mailer"]
    server = "<SMTP_SERVER>"
    port = "<SMTP_PORT>"
    username = "<SMTP_USER>"
    password = "<SMTP_PASS>"

    [ret."Elixir.Ret.Support"]
    slack_webhook_url = "<SLACK_WEBHOOK>"

    [ret."Elixir.RetWeb.Plugs.AddCSP"]
    child_src = ""
    connect_src = "wss://*.stream.<DOMAIN>:4443"
    font_src = ""
    form_action = ""
    frame_src = ""
    img_src = "nearspark.reticulum.io"
    manifest_src = ""
    media_src = ""
    script_src = ""
    style_src = ""
    worker_src = ""

    [ret."Ret.Repo.Migrations.AdminSchemaInit"]
    postgrest_password = ""

    [ret."Elixir.Ret.StatsJob"]

    [ret."Elixir.RetWeb.HealthController"]

    [ret."Elixir.RetWeb.PageController"]
    skip_cache = false
    extra_avatar_headers = ""
    extra_index_headers = ""
    extra_room_headers = ""
    extra_scene_headers = ""

    extra_avatar_html = ""
    extra_index_html = ""
    extra_room_html = ""
    extra_scene_html = ""

    extra_avatar_script = ""
    extra_index_script = ""
    extra_room_script = ""
    extra_scene_script = ""

    [ret."Elixir.Ret.Account"]
    admin_email = "<ADM_EMAIL>"

    [ret."Elixir.Ret.Coturn"]
    realm = "turkey"
    public_tls_ports = "5349"

    [web_push_encryption.vapid_details]
    subject = ""
    public_key = ""
    private_key = ""

    [sentry]
    dsn = "<SENTRY_DSN>"

    [run]
    hostname_dns_suffix = "turkey"

    [hackney]
    max_connections = 250

    [ret."Elixir.Ret.Meta"]
    phx_host = "<HUB_DOMAIN>"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reticulum
  namespace: hubs
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: reticulum
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate: 
      maxUnavailable: 0
      maxSurge: 1
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: reticulum
    spec:
      volumes:
      - name: storage
        hostPath:
          path: /tmp/ret_storage_data
          type: DirectoryOrCreate
      - name: config
        configMap:
          name: ret-config           
      containers:
      - name: reticulum
        volumeMounts:
        - name: storage
          mountPath: /storage
          mountPropagation: Bidirectional
        - name: config
          mountPath: /home/ret
        securityContext:
          privileged: true       
        image: mozillareality/reticulum:stable-latest
        ports:
        - containerPort: 9100
        imagePullPolicy: IfNotPresent
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: turkeyCfg_POD_NS
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: turkeyCfg_NODE_COOKIE
          valueFrom:
            secretKeyRef:
              name: configs
              key: NODE_COOKIE
        - name: turkeyCfg_HUB_DOMAIN
          valueFrom:
            secretKeyRef:
              name: configs
              key: HUB_DOMAIN
        - name: turkeyCfg_DOMAIN
          valueFrom:
            secretKeyRef:
              name: configs
              key: HUB_DOMAIN
        - name: turkeyCfg_DB_USER
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_USER
        - name: turkeyCfg_DB_PASS
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_PASS
        - name: turkeyCfg_DB_NAME
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_NAME
        - name: turkeyCfg_DB_HOST
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_HOST
        - name: turkeyCfg_DB_HOST_T
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_HOST_T
        - name: turkeyCfg_GUARDIAN_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: GUARDIAN_KEY
        - name: turkeyCfg_PERMS_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: PERMS_KEY
        - name: turkeyCfg_PHX_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: PHX_KEY
        - name: turkeyCfg_SMTP_SERVER
          valueFrom:
            secretKeyRef:
              name: configs
              key: SMTP_SERVER
        - name: turkeyCfg_SMTP_PORT
          valueFrom:
            secretKeyRef:
              name: configs
              key: SMTP_PORT
        - name: turkeyCfg_SMTP_USER
          valueFrom:
            secretKeyRef:
              name: configs
              key: SMTP_USER
        - name: turkeyCfg_SMTP_PASS
          valueFrom:
            secretKeyRef:
              name: configs
              key: SMTP_PASS
        - name: turkeyCfg_ADM_EMAIL
          valueFrom:
            secretKeyRef:
              name: configs
              key: ADM_EMAIL
        - name: turkeyCfg_SKETCHFAB_API_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: SKETCHFAB_API_KEY
        - name: turkeyCfg_IMG_PROXY
          value: nearspark.hubs
        - name: turkeyCfg_TENOR_API_KEY
          valueFrom:
            secretKeyRef:
              name: configs
              key: TENOR_API_KEY
        - name: turkeyCfg_YTDL_HOST
          value: "http://ytdl:5000"
        - name: turkeyCfg_PHOTOMNEMONIC
          value: "http://photomnemonic:5000"
        - name: turkeyCfg_SPEELYCAPTOR
          value: "http://speelycaptor:5000"
        - name: turkeyCfg_STORAGE_QUOTA_GB
          value: "1000"
        livenessProbe:
          httpGet:
            path: /health
            port: 4001
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 3
          periodSeconds: 30
        readinessProbe:
            initialDelaySeconds: 20
            httpGet:
              path: /?skipadmin
              port: 4001
              scheme: HTTP
            timeoutSeconds: 5
            periodSeconds: 5
            successThreshold: 5
            failureThreshold: 100
      - name: postgrest
        image: mozillareality/postgrest:stable-latest
        ports:
        - containerPort: 3000
        imagePullPolicy: IfNotPresent
        env:
        - name: PGRST_LOG_LEVEL
          value: info        
        - name: PGRST_DB_SCHEMA
          value: ret0_admin
        - name: PGRST_DB_ANON_ROLE
          value: postgres          
        - name: PGRST_DB_URI
          valueFrom:
            secretKeyRef:
              name: configs
              key: PGRST_DB_URI
        - name: PGRST_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: configs
              key: PGRST_JWT_SECRET
---
apiVersion: v1
kind: Service
metadata:
  name: ret
  namespace: hubs
  annotations:
    metallb.universe.tf/address-pool: red-pool
    metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  clusterIP: None
  ports:
  - name: http-reticulum
    port: 4001
    targetPort: 4001
  - name: https-reticulum
    port: 4000
    targetPort: 4000
  selector:
    app: reticulum
---
########################################################################
######################   pgsql   #######################################
########################################################################
apiVersion: v1
kind: Service
metadata:
  name: pgsql
  namespace: hubs
  # annotations:
  #   metallb.universe.tf/address-pool: red-pool
  #   metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  selector:
    app: pgsql
  ports:
    - name: postgresql
      protocol: TCP
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgsql
  namespace: hubs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgsql
  template:
    metadata:
      labels:
        app: pgsql
    spec:
      containers:
        - name: postgresql
          image: mozillareality/postgres:stable-latest
          ports:
            - name: postgresql
              containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: configs
                  key: DB_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: configs
                  key: DB_PASS
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: configs
                  key: DB_NAME
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgresql-data
          hostPath:
            path: /tmp/pgsql_data
---
####################################################################################
################################### pgbouncer ######################################
####################################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer
  namespace: hubs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgbouncer
  minReadySeconds: 2
  template:
    metadata:
      labels:
        app: pgbouncer
    spec:
      containers:
      - image: mozillareality/pgbouncer:stable-latest
        imagePullPolicy: IfNotPresent
        name: pgbouncer
        env:
        - name: MAX_CLIENT_CONN
          value: "10000"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_PASS
        - name: DB_HOST
          value: pgsql
---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer
  namespace: hubs
  # annotations:
  #   metallb.universe.tf/address-pool: red-pool
  #   metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  ports:
  - name: http
    port: 5432
    targetPort: 5432
  selector:
    app: pgbouncer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgbouncer-t
  namespace: hubs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pgbouncer-t
  minReadySeconds: 2
  template:
    metadata:
      labels:
        app: pgbouncer-t
    spec:
      containers:
      - image: mozillareality/pgbouncer:stable-latest
        imagePullPolicy: IfNotPresent
        name: pgbouncer-t
        env:
        - name: MAX_CLIENT_CONN
          value: "10000"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_USER          
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configs
              key: DB_PASS
        - name: DB_HOST
          value: pgsql
        - name: POOL_MODE
          value: transaction
---
apiVersion: v1
kind: Service
metadata:
  name: pgbouncer-t
  namespace: hubs
  # annotations:
  #   metallb.universe.tf/address-pool: red-pool
  #   metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  ports:
  - name: http
    port: 5432
    targetPort: 5432
  selector:
    app: pgbouncer-t
---
########################################################################
######################   hubs   ########################################
########################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubs
  namespace: hubs
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hubs
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate: 
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: hubs
    spec:
      containers:
      - name: hubs
        image: mozillareality/hubs:stable-latest
        imagePullPolicy: IfNotPresent
        env:
        - name: turkeyCfg_thumbnail_server
          value: 'https://cors.testdomain.com/nearspark'
        - name: turkeyCfg_base_assets_path
          value: https://assets.testdomain.com/hubs/
        - name: turkeyCfg_non_cors_proxy_domains
          value: "testdomain.com,assets.testdomain.com"
        - name: turkeyCfg_reticulum_server
          value: testdomain.com
        - name: turkeyCfg_cors_proxy_server
          value: cors.testdomain.com
        - name: turkeyCfg_shortlink_domain
          value: testdomain.com
        - name: turkeyCfg_tier
          value: p1
        livenessProbe:
          httpGet:
            path: https://localhost/healthz
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 20
          timeoutSeconds: 1
          periodSeconds: 120
---
apiVersion: v1
kind: Service
metadata:
  name: hubs
  namespace: hubs
  annotations:
    haproxy.org/server-ssl: "true"
    metallb.universe.tf/address-pool: red-pool
    metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  clusterIP: None
  ports:
  - name: https-hubs
    port: 8080
    targetPort: 8080
  selector:
    app: hubs
---
########################################################################
######################   spoke   ########################################
########################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spoke
  namespace: hubs
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
spec:
  replicas: 1 
  selector:
    matchLabels:
      app: spoke
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate: 
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: spoke
    spec:
      containers:
      - name: spoke
        image: mozillareality/spoke:stable-latest
        imagePullPolicy: IfNotPresent
        env:
        - name: turkeyCfg_thumbnail_server
          value: 'https://cors.testdomain.com/nearspark'
        - name: turkeyCfg_base_assets_path
          value: https://assets.testdomain.com/spoke/
        - name: turkeyCfg_non_cors_proxy_domains
          value: "testdomain.com,assets.testdomain.com"
        - name: turkeyCfg_reticulum_server
          value: testdomain.com
        - name: turkeyCfg_cors_proxy_server
          value: cors.testdomain.com
        - name: turkeyCfg_shortlink_domain
          value: testdomain.com
        - name: turkeyCfg_hubs_server
          value: testdomain.com
        livenessProbe:
          httpGet:
            path: https://localhost/healthz
            port: 8080
            scheme: HTTPS
          initialDelaySeconds: 20
          timeoutSeconds: 1
          periodSeconds: 120
---
apiVersion: v1
kind: Service
metadata:
  name: spoke
  namespace: hubs
  annotations:
    haproxy.org/server-ssl: "true"
    metallb.universe.tf/address-pool: red-pool
    metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  clusterIP: None
  ports:
  - name: https-spoke
    port: 8080
    targetPort: 8080
  selector:
    app: spoke
---
########################################################################
######################   nearspark   ###################################
########################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nearspark
  namespace: hubs
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
spec:
  replicas: 1 
  selector:
    matchLabels:
      app: nearspark
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate: 
      maxUnavailable: 0
      maxSurge: 1
  template:
    metadata:
      labels:
        app: nearspark
    spec:
      containers:
      - name: nearspark
        image: mozillareality/nearspark:stable-latest
        ports:
        - containerPort: 5000
        imagePullPolicy: IfNotPresent
---
apiVersion: v1
kind: Service
metadata:
  name: nearspark
  namespace: hubs
  # annotations:
  #   metallb.universe.tf/address-pool: red-pool
  #   metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  ports:
  - name: http
    port: 5000
    targetPort: 5000
  selector:
    app: nearspark        
# ---
# ########################################################################
# ######################   speelycaptor   ###############################
# ########################################################################
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: speelycaptor
#   namespace: hubs
#   annotations:
#     cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: speelycaptor
#   minReadySeconds: 2
#   template:
#     metadata:
#       labels:
#         app: speelycaptor
#     spec:
#       containers:
#       - image: mozillareality/speelycaptor:stable-latest
#         imagePullPolicy: IfNotPresent
#         name: speelycaptor
#         env:
#         - name: scratchBucketId
#           value: turkey-speelycaptor-scratch-bucket
#         - name: CLOUD
#           value: gcp
#         - name: GCP_SA_HMAC_KEY
#           valueFrom:
#             secretKeyRef:
#               name: configs
#               key: GCP_SA_HMAC_KEY
#         - name: GCP_SA_HMAC_SECRET
#           valueFrom:
#             secretKeyRef:
#               name: configs
#               key: GCP_SA_HMAC_SECRET
---
apiVersion: v1
kind: Service
metadata:
  name: speelycaptor
  namespace: hubs
  # annotations:
  #   metallb.universe.tf/address-pool: red-pool
  #   metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  ports:
  - name: speelycaptor
    port: 5000
    targetPort: 5000
  selector:
    app: speelycaptor
---
########################################################################
######################   photomnemonic   ###############################
########################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: photomnemonic
  namespace: hubs
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: photomnemonic
  minReadySeconds: 2
  template:
    metadata:
      labels:
        app: photomnemonic
    spec:
      containers:
      - name: photomnemonic
        image: mozillareality/photomnemonic:stable-latest
        imagePullPolicy: IfNotPresent
---
apiVersion: v1
kind: Service
metadata:
  name: photomnemonic
  namespace: hubs
  # annotations:
  #   metallb.universe.tf/address-pool: red-pool
  #   metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  ports:
  - name: photomnemonic
    port: 5000
    targetPort: 5000
  selector:
    app: photomnemonic
---
apiVersion: v1
kind: Secret
metadata:
  name: configs
  namespace: hubs
stringData:
  PSQL: postgres://postgres:123456@pgbouncer/retdb
---
########################################################################
######################   dialog   ######################################
########################################################################  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dialog
  namespace: hubs
  annotations:
    cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dialog
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: dialog
    spec:
      hostNetwork: true
      containers:
      - name: dialog
        image: mozillareality/dialog:stable-latest
        imagePullPolicy: Always
        ports:        
        - hostPort: 4443
          containerPort: 4443
        env:
        - name: perms_key
          valueFrom:
            secretKeyRef:
              name: configs
              key: PERMS_KEY
---
apiVersion: v1
kind: Service
metadata:
  name: dialog
  namespace: hubs
  annotations:
    metallb.universe.tf/address-pool: red-pool
    metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  clusterIP: None
  ports:
  - name: https-dialog
    port: 4443
    targetPort: 4443
  - name: https-dialog-adm
    port: 7000
    targetPort: 7000
  selector:
    app: dialog
---
########################################################################
######################   coturn   ######################################
########################################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coturn
  namespace: hubs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: coturn                                          
  minReadySeconds: 15
  strategy:
    type: RollingUpdate    
  template:
    metadata:
      labels:
        app: coturn
    spec:
      hostNetwork: true
      containers:
      - name: coturn
        image: mozillareality/coturn:stable-latest
        imagePullPolicy: Always
        ports:
        - hostPort: 5349
          containerPort: 5349
        env:
        - name: REALM
          value: turkey
        - name: PSQL
          valueFrom:
            secretKeyRef:
              name: configs
              key: PSQL
---
apiVersion: v1
kind: Service
metadata:
  name: coturn
  namespace: hubs
  # annotations:
  #   metallb.universe.tf/address-pool: red-pool
  #   metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  ports:
  - name: https-coturn
    port: 5349
    targetPort: 5349
  selector:
    app: coturn
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-tcp-config
  namespace: hubs
data:
  5349:
    hubs/coturn:5349
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
  namespace: hubs
data:
  global-config-snippet: |
    tune.bufsize 33792
  backend-config-snippet: |
    option forwardfor 
    option http-pretend-keepalive
  ssl-redirect: "true"
  timeout-client: 30m
  timeout-client-fin: 1h
  timeout-server: 30m
  timeout-server-fin: 1h
  timeout-connect: 3s
  #access logging -- can be enabled at runtime
  syslog-server: 'address:stdout, format: raw, facility:daemon'
---
apiVersion: v1
kind: Secret
metadata:
  name: cert-hcce
  namespace: hubs
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURDekNDQWZPZ0F3SUJBZ0lVQlowK3ZtZHZjYUJGSUlTNm1nQUlxSm5zZjQwd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0ZERVNNQkFHQTFVRUF3d0piWEp5WVc4dWVIbDZNQ0FYRFRJME1EY3hPREUxTXpNeE1Wb1lEekl4TWpRdwpOakkwTVRVek16RXhXakFVTVJJd0VBWURWUVFEREFsdGNuSmhieTU0ZVhvd2dnRWlNQTBHQ1NxR1NJYjNEUUVCCkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDOFVDMTVGUWtCaS84cm5JdGpwWGh3d00vSUZWYmJXck9wRWR6NmR6V0QKOTh5bnZjWDNuZnYvbllydTVBZURUQXRrV0NUbzZ2b3VyOTdFMW1Hdmp4RW5VRk55S0NwTXJhNS8xNnh5cFd0cQpoa1pRZTZyTE9LTDliOGYyWkEvNkVIQk9MVFNpSVJPM0RlUXJyQ1VkdG4vZWU5TksyOEhUWEJGOTYwalQ3bjVwCmVINHV6RVRkcE84YVJFMnNjbk9yV2QrZEpldzFacGR2VERUNzVwSFhzZytPZ2Y3cGlPb2k5NGQyZ3RVa0V1NnIKY0xpcDgrbG1aSjU4UVhUV3VVeWdxMGNVQUI5WWJKMjU3bEJ0ZDkxZkZnRFpEdDdHcU85V20yRmlZaDhFWGFIawo1TEJDM096TkYwT3c3QVg1a0hUeGkxOUlpSmU5eS8vczVzTGwvU0lIdVJWcEFnTUJBQUdqVXpCUk1CMEdBMVVkCkRnUVdCQlNYQWt5dmVDeHJMUUpWdHhwWkhQVTF3NllyQlRBZkJnTlZIU01FR0RBV2dCU1hBa3l2ZUN4ckxRSlYKdHhwWkhQVTF3NllyQlRBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCUgpJRFdVVWVwRzVjTEl3a2tqTU5Kd2Ruek9YMjBWdCt2MEJRSHRHSENsT2dwQ3lwem9WdC9qdW10ZGNza2lVS1d1ClpzYzhNTHNnM1ZCc0ZyQXFLVDh3ZnJ1Z0gxRmNIeGZFMU12Q3Z4WVBMVStpUFZJQ3FUbmxVME1jQ3pVUnZyWHYKRGJtdHQvWllmb2ZvUXJxR2pTMExmZC83ZllHSnMxSHhOMUVCQjBMZEpTek1qR2NqOEtIVUl1T1hGeU1ZMVZrOAp1UFhSL3J3U05GMlFjb0ZtelFKdXh4V2U0MStTcXVZOXlyRjRvd2dOZWdQdStxd3R0T0lnbDkwWWNqTng2Wks3CnRhM0Y3OUo4MFNKYkZDa3R4RkJoZks1aGlDNTh1V1pnaHNFbHRjUkZINVIrN2NwbjJkaE9iZjgxQ1Z6amwzZSsKWVpUMjBVb281NDA4QU95SjRvbkUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRQzhVQzE1RlFrQmkvOHIKbkl0anBYaHd3TS9JRlZiYldyT3BFZHo2ZHpXRDk4eW52Y1gzbmZ2L25ZcnU1QWVEVEF0a1dDVG82dm91cjk3RQoxbUd2anhFblVGTnlLQ3BNcmE1LzE2eHlwV3RxaGtaUWU2ckxPS0w5YjhmMlpBLzZFSEJPTFRTaUlSTzNEZVFyCnJDVWR0bi9lZTlOSzI4SFRYQkY5NjBqVDduNXBlSDR1ekVUZHBPOGFSRTJzY25PcldkK2RKZXcxWnBkdlREVDcKNXBIWHNnK09nZjdwaU9vaTk0ZDJndFVrRXU2cmNMaXA4K2xtWko1OFFYVFd1VXlncTBjVUFCOVliSjI1N2xCdApkOTFmRmdEWkR0N0dxTzlXbTJGaVloOEVYYUhrNUxCQzNPek5GME93N0FYNWtIVHhpMTlJaUplOXkvL3M1c0xsCi9TSUh1UlZwQWdNQkFBRUNnZjkyRDg1eW16MktPcnRBSEdWSGsvWnV1bk9LZmRaMnIrYnptTDl5U0VyRThoYmQKRTUyS0lRSmN2K2phM1J2WXRWUnZGTlFQTTBLbkFwd256RUJ5VUwvd1pldnJKa05lejRVWG9aLzhRTG1YajVlRgozZ0syWmt2Sm1NdEZMbmJWMEhpWWlyNzA1c2YxZkVBUklWd2p4TWRtTlR2RE13UFIvMmI0Q3dzZDAraHROb2xRCnN6K1FnY0JKMWIwSVZ6NEZ6M1N1cGlVUU1mUExta2M2Qk92dWZrbWpwS0oxaWxBV09FWjlBVXpnVzVwT3VKUlIKYWZ2VWhFWkZuTkQ5aXhWVjBDdVRPMEdNMmJVRzNZdEdZejFLWUxRdlZialdwWXZ2TjhNYXFVWmIxVWhRQUtRTgp1YlJiTjUvdWhFN09tRG9rUHNHSENvcnNBOXJUdmFZUXFjUFVTOE1DZ1lFQXgzWDJaUmV3cjlGV0RsN2ZycndLCnA3ZzRnVExnd1BBbEZPL2QvS3RmY1FVT3JTcVZoTnpFcjM5Q3l6clJ1M2p2d0NGaE5QVE9uTEUxWkZJelh3NTUKWDJTTlNzL3pxcENIZ3VLMEJyUzZmellGZGJmMERvL0dnQ0w0NDdUYlZyd0x3Y2UrQ3RXQzBETmViRW5ZazNDcAp4Z0g0cWd4UFdNenJBSXhaUmRoZDFyc0NnWUVBOGJGSDBQNzN1em1rQ1VpcGRXYmFCTjJWSzZzTlk2dTV2OUlqCmRpWVVFRjUrMkZ5VUR2RFFMQ3R3T2ZOZXZiTXZBZ3FUMFkvai92QzF5dmhpdUZUenNOWGl3Q1ZwWXdJMVBwQjAKM01Ma3I4clp0VmQ5UEZ4WFc0emtQYXZZL3luODVOSkRLQVIyK1R2dWc2TWRIQ1JxSXM5Q2RWUVdJV1UyMERlbAp1ZWQ3ekNzQ2dZRUFzdmpZMXNyVUFsNk9uaVJwQnd1NWI5YnY5SlhuYjVmTFhpY0JBL2Z0a3FiY0RXdDVjQmI3CjhSRDZxUXFsS0ZlU29NNFN3QWF0NFpGc2ZCRDZBV0FtYmY3MmZOdHRJMjI5K2laYkxPMDdybXVWcUpRZnpIVWIKd3R3ZWdZdEZpR1VCRTZhYmtuTVVocWFoSWY5ODhvY1QveFREd0NsOWhRdVNEaExoQTdmcU00TUNnWUJlbnJIbgo3em1iRVpqWGpadlIrMzhVOG82b3R1R2FDS3ZDbmdrR0F5aE50RURpZ1hQeFdYT1dKemRiYUp6SmxYR3MwZWxHCjNKYzh3bzNaTlY2b25aRjl4RzV1SFBkaUxJWWR4VDRMQXoyMldLcmNwTERCeGNEcGRZSVJac3FnTXBid0dpVHkKY0xVSEkrQmZwcWNKMG5PK3h2ZFVxYU8wVlVTZFJYdmJDUFhkV3dLQmdRQ2NaZmFpOHVvQ2Q1Z3R3R1ZqeXNDWQpvVno4TnBORU1FRlFEZ1hCajF1OVJNSU9MbkZLM3lSMC9KRnNNcHczSWVjNmMrL3NoY29sMVNTdGxKQ1ZWV0FJCml0R0dZbWpMWHF2NnRNc1A2bFFyR1pWaWdvbmk4NWpZK3VhcUIwZE81OWhhNzdoOEtmaXJ0bitQTzBlOGVuWGkKNE9hMXlablpkWTg2UU0waExVWlNKZz09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
---
######################################################################################
###################################### haproxy #######################################
######################################################################################
kind: Deployment
apiVersion: apps/v1
metadata:
  name: haproxy
  namespace: hubs
  labels:
    app: haproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: haproxy
  template:
    metadata:
      labels:
        app: haproxy
        name: haproxy
    spec:
      # hostNetwork: true
      serviceAccountName: haproxy-sa
      terminationGracePeriodSeconds: 60
      containers:
      - name: haproxy
        image: mozillareality/haproxy:stable-latest
        args:
        - --configmap=hubs/haproxy-config
        - --https-bind-port=4443
        - --http-bind-port=8080
        - --configmap-tcp-services=hubs/haproxy-tcp-config
        - --ingress.class=haproxy
        - --log=warning #error warning info debug trace
        - --default-ssl-certificate=hubs/cert-hcce
        securityContext:
          runAsUser:  1000
          runAsGroup: 1000
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
        livenessProbe:
          httpGet:
            path: /healthz
            port: 1042
        env:
        - name: TZ
          value: "Etc/UTC"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
---
apiVersion: v1
kind: Service
metadata:
  name: lb
  namespace: hubs
  annotations:
    metallb.universe.tf/address-pool: red-pool
    metallb.universe.tf/allow-shared-ip: red-pool-sharing-same-lb-ip
spec:
  type: LoadBalancer
  loadBalancerIP: 140.203.155.106
  externalTrafficPolicy: Local
  selector:
    app: haproxy
  ports:
  - name: http
    # protocol: TCP
    port: 80
    targetPort: 8080
  - name: https
    # protocol: TCP
    port: 443
    targetPort: 4443
  - name: dialog
    # protocol: TCP
    port: 4443
    targetPort: 4443
  - name: turn
    # protocol: TCP
    port: 5349
    targetPort: 5349
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy-sa
  namespace: hubs
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy-cr
rules:
  - apiGroups:
    - ""
    resources:
    - configmaps
    - nodes
    - pods
    - namespaces
    - events
    - serviceaccounts
    - services
    - endpoints    
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - "extensions"
    - "networking.k8s.io"
    resources:
    - ingresses
    - ingresses/status
    - ingressclasses
    verbs:
    - get
    - list
    - watch
  - apiGroups:
    - "extensions"
    - "networking.k8s.io"
    resources:
    - ingresses/status
    verbs:
    - update
  - apiGroups:
    - ""
    resources:
    - secrets
    verbs:
    - get
    - list
    - watch
    - create
    - patch
    - update
  - apiGroups:
    - core.haproxy.org
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch
    - update
  - apiGroups:
    - "discovery.k8s.io"
    resources:
    - '*'
    verbs:
    - get
    - list
    - watch      
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: haproxy-rb
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: haproxy-cr
subjects:
- kind: ServiceAccount
  name: haproxy-sa
  namespace: hubs 
